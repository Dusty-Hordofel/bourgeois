"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { sendRequestEmail } from "@/actions/request-email.action";
import { useToast } from "@/hooks/use-toast";
import { useState } from "react";
import { LoaderCircle } from "lucide-react";

export const formSchema = z.object({
  firstName: z.string().min(2, {
    message: "Le pr√©nom doit contenir au moins 2 caract√®res.",
  }),
  lastName: z.string().min(2, {
    message: "Le nom doit contenir au moins 2 caract√®res.",
  }),
  phone: z.string().regex(/^(\+33|0)[1-9](\d{2}){4}$/, {
    message: "Veuillez entrer un num√©ro de t√©l√©phone fran√ßais valide.",
  }),
  email: z.string().email({
    message: "Veuillez entrer une adresse email valide.",
  }),
  objectType: z.string().min(1, {
    message: "Veuillez s√©lectionner un type d'objet.",
  }),
  workType: z.string().min(1, {
    message: "Veuillez s√©lectionner un type de travail.",
  }),
});

const objectTypes = [
  "Maisons",
  "Appartements",
  "Chalets",
  "Bureaux",
  "Locaux commerciaux",
  "Entrep√¥ts",
  "Usines",
  "H√¥pitaux",
  "Cliniques",
  "Laboratoires",
  "Espaces √©v√©nementiels",
  "H√¥tels",
  "√âcoles et universit√©s",
  "Restaurants",
  "Magasins de d√©tail",
];

const workTypes = [
  "Nettoyage complet apr√®s travaux",
  "Nettoyage r√©gulier (quotidien, hebdomadaire, mensuel)",
  "Nettoyage de vitres et surfaces vitr√©es",
  "D√©sinfection des espaces de travail",
  "Nettoyage de fin de bail",
  "Entretien des sols (carrelage, moquette, parquet)",
  "Nettoyage industriel",
  "Nettoyage des espaces de sant√© (h√¥pitaux, cliniques)",
  "Nettoyage apr√®s √©v√©nement",
  "Entretien des parties communes d'immeubles",
  "Nettoyage de fa√ßades",
  "Gestion des d√©chets",
  "Traitement anti-acariens et allergies",
  "Nettoyage et d√©sinfection de cuisines industrielles",
  "D√©barras et nettoyage de caves ou greniers",
  "Nettoyage de v√©hicules professionnels (flottes d'entreprise)",
];

export default function ContactForm() {
  const [isLoading, setIsLoading] = useState(false);
  const [isError, setIsError] = useState(false);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      phone: "",
      email: "",
      objectType: "",
      workType: "",
    },
  });

  const { toast } = useToast();

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    const response = await sendRequestEmail(values);

    if (!response.error) {
      toast({
        title: "Excellente nouvelle ü§©",
        description: "Votre demande a √©t√© envoy√©e avec succ√®s üéâ",
      });

      setIsLoading(false);

      form.reset();
    } else {
      toast({
        title: "Quelque chose s'est mal pass√© üî•",
        description:
          "Votre demande n'a pas pu √™tre envoy√© pour des raisons techniques‚ö†Ô∏è",
      });
      setIsLoading(false);
    }
  }

  console.log(form.formState.errors);

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="lastName"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Nom</FormLabel>
                <FormControl>
                  <Input
                    placeholder="Dupont"
                    {...field}
                    className="text-base"
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="firstName"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Pr√©nom</FormLabel>
                <FormControl>
                  <Input placeholder="Jean" {...field} className="text-base" />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="phone"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Num√©ro de t√©l√©phone</FormLabel>
                <FormControl>
                  <Input placeholder="0612345678" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Email</FormLabel>
                <FormControl>
                  <Input placeholder="jean.dupont@example.com" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="objectType"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Type d&apos;objet</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="S√©lectionnez un type d'objet" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {objectTypes.map((type) => (
                      <SelectItem key={type} value={type}>
                        {type}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="workType"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Type de travail</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="S√©lectionnez un type de travail" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {workTypes.map((type) => (
                      <SelectItem key={type} value={type}>
                        {type}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <div className="flex  sm:justify-end ">
          <Button
            type="submit"
            className="py-6 w-full sm:w-max hover:bg-green-700 rounded-none relative"
            disabled={Object.keys(form.formState.errors).length > 0}
            // style={{
            //   backgroundColor:
            //     Object.keys(form.formState.errors).length > 0 ? "red" : "black",
            //   color: "white",
            // }}
          >
            {isLoading && (
              <div className="absolute z-10 top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 ">
                <LoaderCircle color="#ffffff" className="animate-spin" />
              </div>
            )}
            <span className={`${isLoading && "invisible"}`}>
              Envoyer votre demande
            </span>
          </Button>
        </div>
      </form>
    </Form>
  );
}
